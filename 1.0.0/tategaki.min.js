(()=>{"use strict";var e;!function(e){e.default="default",e.cjkPunc="cjk-punc",e.fullwidthAlphabet="fullwidth-alphabet",e.latin="latin",e.kana="kana",e.ambiguous="ambiguous"}(e||(e={})),String.prototype.segmentise=function(t){let n,i=String(this),s=[],o=0;for(;n=t.exec(i);){let t;n.index>o&&s.push({content:i.substring(o,n.index),formatGuide:e.default}),n[1]?t=e.ambiguous:n[2]?t=e.cjkPunc:n[3]?t=e.fullwidthAlphabet:n[4]?t=e.latin:n[5]&&(t=e.kana),s.push({content:n[0],formatGuide:t}),o=n.index+n[0].length}return i.length>o&&s.push({content:i.substring(o),formatGuide:e.default}),s};class t{rootElement;shouldPcS;imitatePcS;imitateTransfromToFullWidth;shouldRemoveStyle;setElementAttributes(t,n){switch(n.formatGuide){case e.default:return void(t.innerHTML=this.postProcess(n.content));case e.latin:t.setAttribute("lang","en");break;case e.cjkPunc:this.shouldPcS&&(t.innerHTML=this.squeeze(n.content))}t.classList.add(n.formatGuide)}postProcess(e){return e.replace(/\n[ \n]*/g,'<br /><span class="indent"></span>')}format(e,t=!0){if(e.nodeType===Node.TEXT_NODE){let t=e.nodeValue;if(!t.trim())return;t=this.correctPuncs(t);let n=/([\u002f\u2013]+|――)|([\u3001\u3002\u301d\u301f\uff01\uff0c\uff1a\uff1b\uff1f\u3008-\u3011\u3014-\u301B\uff08\uff09]+)|([\uff21-\uff3a\uff41-\uff5a]+)|([\p{Script=Latin}0-9\u0020-\u0023\u0025-\u002b\u002c-\u002e\u003a\u003b\u003f\u0040\u005b-\u005d\u005f\u007b\u007d\u00a1\u00a7\u00ab\u00b2\u00b3\u00b6\u00b7\u00b9\u00bb-\u00bf\u2010-\u2012\u2018\u2019\u201c\u201d\u2020\u2021\u2026\u2027\u2030\u2032-\u2037\u2039\u203a\u203c-\u203e\u2047-\u2049\u204e\u2057\u2070\u2074-\u2079\u2080-\u2089\u2150\u2153\u2154\u215b-\u215e\u2160-\u217f\u2474-\u249b\u2e18\u2e2e]+)|([\u3041-\u309f\u30a0-\u30fa\u30fc\u30ff]+)/gu,i=t.segmentise(n),s=e.parentElement;return void(s.childElementCount||1!==i.length?(i.forEach((t=>{let n=document.createElement("span");n.innerText=t.content,this.setElementAttributes(n,t),s.insertBefore(n,e)})),s.removeChild(e)):this.setElementAttributes(s,i[0]))}if("BR"===e.nodeName)return;const n="P"===e.nodeName||"BLOCKQUOTE"===e.nodeName;Array.from(e.childNodes).forEach((e=>{this.format(e,!n&&t)}))}removeStyle(e=this.rootElement){e.removeAttribute("style"),e.removeAttribute("width"),e.removeAttribute("height"),Array.from(e.children,(e=>{this.removeStyle(e)}))}correctPuncs(e){return e.replace(/——|──/g,"――").replace(/……/g,"⋯⋯")}squeeze(e){return e.split("").map((e=>{if(/[\u3001\u3002\uff0c\uff01\uff1a\uff1b\uff1f]/.test(e))return`<span class="squeeze-other-punc">${e}</span>`;const t="〝"===e||e.charCodeAt(0)%2==0;let n=`<span class="${t?"squeeze-in":"squeeze-out"}">${e}</span>`;return this.imitatePcS?t?'<span class="squeeze-in-space"> </span>'+n:n+'<span class="squeeze-out-space"> </span>':n})).join("")}transfromToFullWidth(e){const t="0".charCodeAt(0),n="０".charCodeAt(0),i=e.charCodeAt(0);return String.fromCharCode(i-t+n)}tcy(t=!1){let n=document.documentElement,i=window.getComputedStyle(n).fontSize.match(/(\d+)px/)[1],s=parseInt(i);Array.from(this.rootElement.getElementsByClassName(e.latin)).forEach((n=>{const i=n.innerHTML.trim();if(!(n.previousElementSibling&&n.previousElementSibling.classList.contains(e.ambiguous)||n.nextElementSibling&&n.nextElementSibling.classList.contains(e.ambiguous))&&/^[\w\p{Script=Latin}]/u.test(i)&&"I"!=n.nodeName&&"EM"!=n.nodeName&&"I"!=n.parentElement.nodeName&&"EM"!=n.parentElement.nodeName)if(1==i.length)t?n.innerHTML=this.transfromToFullWidth(i):(n.innerHTML=i,n.classList.add("to-fullwidth")),n.classList.remove("latin"),n.removeAttribute("lang");else if(/^([A-Z]{3,10}|\d{4,10})$/.test(i))t?n.innerHTML=Array.from(i,(e=>this.transfromToFullWidth(e))).join(""):(n.innerHTML=i,n.classList.add("to-fullwidth")),n.classList.remove("latin"),n.removeAttribute("lang");else if(/^[A-Z]{2}$|^\d{2,3}$/.test(i))n.innerHTML=i,n.classList.remove("latin"),n.removeAttribute("lang"),n.classList.add("tcy");else if(/^\d{1,3}%$/.test(i)){const e=/^(\d{1,3})%$/.exec(i);let t=document.createElement("span"),s=e[1];1===s.length&&(s=this.transfromToFullWidth(s)),t.innerHTML=`<span ${1==s.length?"":'class="tcy"'}>${s}</span>&#8288;％`,n.replaceWith(t)}else{let e=s;n.innerHTML!=i?e*=1.5:e*=1.333,n.getBoundingClientRect().height<=e&&(n.innerHTML=i,n.classList.add("tcy"))}}))}correctAmbiguous(){Array.from(document.getElementsByClassName(e.ambiguous),(t=>{if(t.previousElementSibling&&t.nextElementSibling)if("――"!==t.innerHTML)if(t.previousElementSibling.classList.contains(e.latin)&&t.nextElementSibling.classList.contains(e.latin))t.classList.add("latin");else switch(t.innerHTML){case"/":t.innerHTML="／";break;case"–":t.innerHTML="―"}else t.classList.add("aalt-on");else t.classList.add("latin")}))}parse(){this.shouldRemoveStyle&&this.removeStyle(),this.rootElement.classList.add("tategaki"),this.rootElement.classList.add(this.imitatePcS?"imitate-pcs":"opentype-pcs"),this.format(this.rootElement),this.tcy(this.imitateTransfromToFullWidth),this.correctAmbiguous()}constructor(e,t=!0,n=!0,i=!0,s=!1){this.rootElement=e,this.shouldPcS=t,this.imitatePcS=n,this.imitateTransfromToFullWidth=i,this.shouldRemoveStyle=s}}var n=function(e,t,n){if(n||2===arguments.length)for(var i,s=0,o=t.length;s<o;s++)!i&&s in t||(i||(i=Array.prototype.slice.call(t,0,s)),i[s]=t[s]);return e.concat(i||Array.prototype.slice.call(t))},i=function(e,t,n){this.name=e,this.version=t,this.os=n,this.type="browser"},s=function(e,t,n,i){this.name=e,this.version=t,this.os=n,this.bot=i,this.type="bot-device"},o=function(){this.type="bot",this.bot=!0,this.name="bot",this.version=null,this.os=null},r=/(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/,a=[["aol",/AOLShield\/([0-9\._]+)/],["edge",/Edge\/([0-9\._]+)/],["edge-ios",/EdgiOS\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["kakaotalk",/KAKAOTALK\s([0-9\.]+)/],["samsung",/SamsungBrowser\/([0-9\.]+)/],["silk",/\bSilk\/([0-9._-]+)\b/],["miui",/MiuiBrowser\/([0-9\.]+)$/],["beaker",/BeakerBrowser\/([0-9\.]+)/],["edge-chromium",/EdgA?\/([0-9\.]+)/],["chromium-webview",/(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["phantomjs",/PhantomJS\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["fxios",/FxiOS\/([0-9\.]+)/],["opera-mini",/Opera Mini.*Version\/([0-9\.]+)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/],["facebook",/FB[AS]V\/([0-9\.]+)/],["instagram",/Instagram\s([0-9\.]+)/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Mobile/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Gecko\)$/],["curl",/^curl\/([0-9\.]+)$/],["searchbot",/alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/]],u=[["iOS",/iP(hone|od|ad)/],["Android OS",/Android/],["BlackBerry OS",/BlackBerry|BB10/],["Windows Mobile",/IEMobile/],["Amazon OS",/Kindle/],["Windows 3.11",/Win16/],["Windows 95",/(Windows 95)|(Win95)|(Windows_95)/],["Windows 98",/(Windows 98)|(Win98)/],["Windows 2000",/(Windows NT 5.0)|(Windows 2000)/],["Windows XP",/(Windows NT 5.1)|(Windows XP)/],["Windows Server 2003",/(Windows NT 5.2)/],["Windows Vista",/(Windows NT 6.0)/],["Windows 7",/(Windows NT 6.1)/],["Windows 8",/(Windows NT 6.2)/],["Windows 8.1",/(Windows NT 6.3)/],["Windows 10",/(Windows NT 10.0)/],["Windows ME",/Windows ME/],["Open BSD",/OpenBSD/],["Sun OS",/SunOS/],["Chrome OS",/CrOS/],["Linux",/(Linux)|(X11)/],["Mac OS",/(Mac_PowerPC)|(Macintosh)/],["QNX",/QNX/],["BeOS",/BeOS/],["OS/2",/OS\/2/]];function l(e){var t=function(e){return""!==e&&a.reduce((function(t,n){var i=n[0],s=n[1];if(t)return t;var o=s.exec(e);return!!o&&[i,o]}),!1)}(e);if(!t)return null;var l=t[0],c=t[1];if("searchbot"===l)return new o;var d=c[1]&&c[1].split(".").join("_").split("_").slice(0,3);d?d.length<3&&(d=n(n([],d,!0),function(e){for(var t=[],n=0;n<e;n++)t.push("0");return t}(3-d.length),!0)):d=[];var m=d.join("."),f=function(e){for(var t=0,n=u.length;t<n;t++){var i=u[t],s=i[0];if(i[1].exec(e))return s}return null}(e),h=r.exec(e);return h&&h[1]?new s(l,m,f,h[1]):new i(l,m,f)}const c="undefined"==typeof document&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product?new function(){this.type="react-native",this.name="react-native",this.version=null,this.os=null}:"undefined"!=typeof navigator?l(navigator.userAgent):"undefined"!=typeof process&&process.version?new function(e){this.version=e,this.type="node",this.name="node",this.os=process.platform}(process.version.slice(1)):null;const d=c&&"firefox"===c.name,m=c&&"chrome"===c.name;c&&document.body.classList.add(c.name),Array.from(document.querySelectorAll("article")).forEach((e=>{new t(e,!0,d||m,!0).parse()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,